

// 设计哈希算法的原则
// 1、从哈希值不能反向推导出原始数据，哈希算法也叫单向哈希算法
// 2、对输入数据非常敏感，随意的改动都可以导致不同的哈希值
// 3、散列冲突的概率药效，对于不同的原始数据哈希值相同的概率要小
// 4、哈希算法的执行效率要高效，针对较长的文本也能快速计算出哈希值


// 哈希算法应用
// 安全加密、唯一标识、数据校验、散列函数、
// 负载均衡、数据分片和分布式存储

// 安全加密：任何哈希算法都会出现散列冲突，但是这个冲突概率非常小。
// 越是复杂的哈希算法越难破解，计算时间也越长。选择哈希算法的时候，
// 要权衡安全性和计算时间来决定采用哪种哈希算法

// 唯一标识：哈希算法对大数据做信息摘要，通过一个较短的二进制编码来表示很大的数据。

// 数据校验：用于校验数据的完整性和正确性。

// 散列函数：对哈希算法要求比较特别，更加看重的是散列表的平均性和哈希算法的执行效率。

// 负载均衡
// 如何实现一个会话粘滞的负载均衡算法?
// 也就是说,在同一个客户端上,在一次会话中的所有请求
// 都路由到同一个服务器上.
// 最直接的方法是维护一张映射关系表.但弊端很大.
// 哈希算法实现:通过哈希算法,对客户端IP地址或者会话ID计算哈希值,
// 将获得的哈希值与服务器列表的大小进行取模运算,得到的值是被路由到的服务器编号.
// 这样我们就可以把同一个IP的所有请求都路由到同一台服务器上.

// 数据分片
// (MapReduce设计思想)
// 我们可以先对数据进行分片,然后用多台机器处理的方法提高运行速度.

// 判断图片是否在图库中
// 通过哈希算法计算一个图片的唯一标识

// 分布式存储
// 一致性哈希算法
// 假设我们有k个机器，数据的哈希值范围是[0,MAX]。我们将整个范围划分为
// m(m远大于k)个区间，每个机器负责m/k个小区间。当有新机器加入的时候，
// 我们将某几个小区间的数据从原来的机器搬移到新机器中。
// 这样，既不用全部重新哈希、搬移数据，也保持了各个机器上数据数量的均衡。


// 在负载均衡应用中，利用哈希算法替代映射表，可以实现一个会话粘滞的负载均衡策略。
// 在数据分片应用中，通过哈希算法对处理的海量数据进行分片，多机分布式处理，可以突破淡季资源的限制。
// 在分布式存储应用中，利用一致性哈希算法可以解决缓存等分布式系统的扩容、锁绒导致的数据大量搬移的问题。
